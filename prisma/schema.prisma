// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TUser {
  id           Int            @id @default(autoincrement())
  name         String
  password     String
  email        String         @unique
  phoneNum     String         @unique
  rating       String
  ExamQuestion ExamQuestion[]
  Exam         Exam[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  name      String
  password  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Exam {
  id        Int            @id @default(autoincrement()) //id
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  title     String
  tester    TUser          @relation(fields: [tUserId], references: [id])
  tUserId   Int
  Question  ExamQuestion[]
}

model ExamQuestion {
  id         Int          @id @default(autoincrement())
  Exam       Exam         @relation(fields: [examId], references: [id], onDelete: Cascade) //문제 (이건 이미지)
  examId     Int
  item       String //문제
  indexNum   Int // 문제번호
  answer     String //답
  //제출한답
  ExamAnswer ExamAnswer[]
  tUser      TUser        @relation(fields: [tUserId], references: [id], onDelete: Cascade)
  tUserId    Int
}

model ExamAnswer {
  id             Int          @id @default(autoincrement())
  stName         String
  ExamQuestion   ExamQuestion @relation(fields: [examQuestionId], references: [id], onDelete: Cascade)
  examQuestionId Int
}

model ReportCard {
  id        Int      @id @default(autoincrement())
  score     Int // 점수
  comment   String? // 텍스트 코멘트
  imageUrl  String? // 이미지 URL
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Survey {
  id                Int                 @id @default(autoincrement())
  category          String
  writter           String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  admissionQuestion AdmissionQuestion[]
}

model AdmissionQuestion {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  survey    Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
